{"version":3,"file":"client.js","sources":["../../src/client.ts"],"sourcesContent":["import * as os from 'os';\nimport { TextEncoder } from 'util';\nimport type { ServerRuntimeClientOptions } from '@sentry/core';\nimport { ServerRuntimeClient, applySdkMetadata } from '@sentry/core';\n\nimport type { NodeClientOptions } from './types';\n\n/**\n * The Sentry Node SDK Client.\n *\n * @see NodeClientOptions for documentation on configuration options.\n * @see SentryClient for usage documentation.\n */\nexport class NodeClient extends ServerRuntimeClient<NodeClientOptions> {\n  /**\n   * Creates a new Node SDK instance.\n   * @param options Configuration options for this SDK.\n   */\n  public constructor(options: NodeClientOptions) {\n    applySdkMetadata(options, 'node');\n\n    // Until node supports global TextEncoder in all versions we support, we are forced to pass it from util\n    options.transportOptions = {\n      textEncoder: new TextEncoder(),\n      ...options.transportOptions,\n    };\n\n    const clientOptions: ServerRuntimeClientOptions = {\n      ...options,\n      platform: 'node',\n      runtime: { name: 'node', version: global.process.version },\n      serverName: options.serverName || global.process.env.SENTRY_NAME || os.hostname(),\n    };\n\n    super(clientOptions);\n  }\n}\n"],"names":[],"mappings":";;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACO,MAAM,UAAA,SAAmB,mBAAmB,CAAoB;AACvE;AACA;AACA;AACA;AACA,GAAS,WAAW,CAAC,OAAO,EAAqB;AACjD,IAAI,gBAAgB,CAAC,OAAO,EAAE,MAAM,CAAC,CAAA;AACrC;AACA;AACA,IAAI,OAAO,CAAC,gBAAA,GAAmB;AAC/B,MAAM,WAAW,EAAE,IAAI,WAAW,EAAE;AACpC,MAAM,GAAG,OAAO,CAAC,gBAAgB;AACjC,KAAK,CAAA;AACL;AACA,IAAI,MAAM,aAAa,GAA+B;AACtD,MAAM,GAAG,OAAO;AAChB,MAAM,QAAQ,EAAE,MAAM;AACtB,MAAM,OAAO,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,OAAO,EAAE,MAAM,CAAC,OAAO,CAAC,SAAS;AAChE,MAAM,UAAU,EAAE,OAAO,CAAC,UAAW,IAAG,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,WAAY,IAAG,EAAE,CAAC,QAAQ,EAAE;AACvF,KAAK,CAAA;AACL;AACA,IAAI,KAAK,CAAC,aAAa,CAAC,CAAA;AACxB,GAAE;AACF;;;;"}