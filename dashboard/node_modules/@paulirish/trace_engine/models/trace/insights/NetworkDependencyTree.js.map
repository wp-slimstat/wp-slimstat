{"version":3,"file":"NetworkDependencyTree.js","sourceRoot":"","sources":["../../../../../../../front_end/models/trace/insights/NetworkDependencyTree.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2025 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../../core/i18n/i18n.js';\nimport * as Protocol from '../../../generated/protocol.js';\nimport type * as Handlers from '../handlers/handlers.js';\nimport * as Helpers from '../helpers/helpers.js';\nimport type * as Lantern from '../lantern/lantern.js';\nimport * as Types from '../types/types.js';\n\nimport {\n  InsightCategory,\n  InsightKeys,\n  type InsightModel,\n  type InsightSetContext,\n  type InsightSetContextWithNavigation,\n  type PartialInsightModel,\n  type RelatedEventsMap,\n} from './types.js';\n\nexport const UIStrings = {\n  /**\n   * @description Title of an insight that recommends avoiding chaining critical requests.\n   */\n  title: 'Network dependency tree',\n  /**\n   * @description Description of an insight that recommends avoiding chaining critical requests.\n   */\n  description:\n      '[Avoid chaining critical requests](https://developer.chrome.com/docs/lighthouse/performance/critical-request-chains) by reducing the length of chains, reducing the download size of resources, or deferring the download of unnecessary resources to improve page load.',\n  /**\n   * @description Description of the warning that recommends avoiding chaining critical requests.\n   */\n  warningDescription:\n      'Avoid chaining critical requests by reducing the length of chains, reducing the download size of resources, or deferring the download of unnecessary resources to improve page load.',\n  /**\n   * @description Text status indicating that there isn't long chaining critical network requests.\n   */\n  noNetworkDependencyTree: 'No rendering tasks impacted by network dependencies',\n  /**\n   * @description Text for the maximum critical path latency. This refers to the longest chain of network requests that\n   * the browser must download before it can render the page.\n   */\n  maxCriticalPathLatency: 'Max critical path latency:'\n} as const;\n\nconst str_ = i18n.i18n.registerUIStrings('models/trace/insights/NetworkDependencyTree.ts', UIStrings);\nexport const i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\n// XHRs are fetched at High priority, but we exclude them, as they are unlikely to be critical\n// Images are also non-critical.\nconst nonCriticalResourceTypes = new Set<Protocol.Network.ResourceType>([\n  Protocol.Network.ResourceType.Image,\n  Protocol.Network.ResourceType.XHR,\n  Protocol.Network.ResourceType.Fetch,\n  Protocol.Network.ResourceType.EventSource,\n]);\n\nexport interface CriticalRequestNode {\n  request: Types.Events.SyntheticNetworkRequest;\n  timeFromInitialRequest: Types.Timing.Micro;\n  children: CriticalRequestNode[];\n  isLongest?: boolean;\n  // Store all the requests that appear in any chains this request appears in.\n  // Use set to avoid duplication.\n  relatedRequests: Set<Types.Events.SyntheticNetworkRequest>;\n}\n\nexport type NetworkDependencyTreeInsightModel = InsightModel<typeof UIStrings, {\n  rootNodes: CriticalRequestNode[],\n  maxTime: Types.Timing.Micro,\n  fail: boolean,\n}>;\n\nfunction finalize(partialModel: PartialInsightModel<NetworkDependencyTreeInsightModel>):\n    NetworkDependencyTreeInsightModel {\n  return {\n    insightKey: InsightKeys.NETWORK_DEPENDENCY_TREE,\n    strings: UIStrings,\n    title: i18nString(UIStrings.title),\n    description: i18nString(UIStrings.description),\n    category: InsightCategory.LCP,\n    state: partialModel.fail ? 'fail' : 'pass',\n    ...partialModel,\n  };\n}\n\nfunction isCritical(request: Types.Events.SyntheticNetworkRequest, context: InsightSetContextWithNavigation): boolean {\n  // The main resource is always critical.\n  if (request.args.data.requestId === context.navigationId) {\n    return true;\n  }\n\n  // Treat any preloaded resource as non-critical\n  if (request.args.data.isLinkPreload) {\n    return false;\n  }\n\n  // Iframes are considered High Priority but they are not render blocking\n  const isIframe = request.args.data.resourceType === Protocol.Network.ResourceType.Document &&\n      request.args.data.frame !== context.frameId;\n\n  if (nonCriticalResourceTypes.has(request.args.data.resourceType) || isIframe ||\n      // Treat any missed images, primarily favicons, as non-critical resources\n      request.args.data.mimeType.startsWith('image/')) {\n    return false;\n  }\n\n  // Requests that have no initiatorRequest are typically ambiguous late-load assets.\n  // Even on the off chance they were important, we don't have any parent to display for them.\n  const initiatorUrl =\n      request.args.data.initiator?.url || Helpers.Trace.getZeroIndexedStackTraceForEvent(request)?.at(0)?.url;\n  if (!initiatorUrl) {\n    return false;\n  }\n\n  const isBlocking = Helpers.Network.isSyntheticNetworkRequestEventRenderBlocking(request);\n  const isHighPriority = Helpers.Network.isSyntheticNetworkRequestHighPriority(request);\n  return isHighPriority || isBlocking;\n}\n\nexport function generateInsight(\n    _parsedTrace: Handlers.Types.ParsedTrace, context: InsightSetContext): NetworkDependencyTreeInsightModel {\n  if (!context.navigation) {\n    return finalize({\n      rootNodes: [],\n      maxTime: Types.Timing.Micro(0),\n      fail: false,\n    });\n  }\n\n  const rootNodes: CriticalRequestNode[] = [];\n  const relatedEvents: RelatedEventsMap = new Map();\n  let maxTime = Types.Timing.Micro(0);\n  let fail = false;\n\n  let longestChain: Types.Events.SyntheticNetworkRequest[] = [];\n\n  function addChain(path: Types.Events.SyntheticNetworkRequest[]): void {\n    if (path.length === 0) {\n      return;\n    }\n    if (path.length >= 2) {\n      fail = true;\n    }\n    const initialRequest = path[0];\n    const lastRequest = path[path.length - 1];\n    const totalChainTime = Types.Timing.Micro(lastRequest.ts + lastRequest.dur - initialRequest.ts);\n    if (totalChainTime > maxTime) {\n      maxTime = totalChainTime;\n      longestChain = path;\n    }\n\n    let currentNodes = rootNodes;\n\n    for (let depth = 0; depth < path.length; ++depth) {\n      const request = path[depth];\n      // find the request\n      let found = currentNodes.find(node => node.request === request);\n\n      if (!found) {\n        const timeFromInitialRequest = Types.Timing.Micro(request.ts + request.dur - initialRequest.ts);\n        found = {\n          request,\n          timeFromInitialRequest,\n          children: [],\n          relatedRequests: new Set(),\n        };\n        currentNodes.push(found);\n      }\n\n      path.forEach(request => found?.relatedRequests.add(request));\n\n      // TODO(b/372897712) Switch the UIString to markdown.\n      relatedEvents.set(request, depth < 2 ? [] : [i18nString(UIStrings.warningDescription)]);\n\n      currentNodes = found.children;\n    }\n  }\n  // By default `traverse` will discover nodes in BFS-order regardless of dependencies, but\n  // here we need traversal in a topological sort order. We'll visit a node only when its\n  // dependencies have been met.\n  const seenNodes = new Set<Lantern.Graph.Node<Types.Events.SyntheticNetworkRequest>>();\n  function getNextNodes(node: Lantern.Graph.Node<Types.Events.SyntheticNetworkRequest>):\n      Array<Lantern.Graph.Node<Types.Events.SyntheticNetworkRequest>> {\n    return node.getDependents().filter(n => n.getDependencies().every(d => seenNodes.has(d)));\n  }\n\n  context.lantern?.graph.traverse((node, traversalPath) => {\n    seenNodes.add(node);\n    if (node.type !== 'network') {\n      return;\n    }\n    const networkNode = node;\n    if (!isCritical(networkNode.rawRequest, context)) {\n      return;\n    }\n\n    const networkPath = traversalPath.filter(node => node.type === 'network').reverse().map(node => node.rawRequest);\n\n    // Ignore if some ancestor is not a critical request.\n    if (networkPath.some(request => (!isCritical(request, context)))) {\n      return;\n    }\n\n    // Ignore non-network things (like data urls).\n    if (node.isNonNetworkProtocol) {\n      return;\n    }\n\n    addChain(networkPath);\n  }, getNextNodes);\n\n  // Mark the longest chain\n  if (longestChain.length > 0) {\n    let currentNodes = rootNodes;\n    for (const request of longestChain) {\n      const found = currentNodes.find(node => node.request === request);\n      if (found) {\n        found.isLongest = true;\n        currentNodes = found.children;\n      } else {\n        console.error('Some request in the longest chain is not found');\n      }\n    }\n  }\n\n  return finalize({\n    rootNodes,\n    maxTime,\n    fail,\n    relatedEvents,\n  });\n}\n"]}