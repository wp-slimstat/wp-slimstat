{"version":3,"file":"Configuration.js","sourceRoot":"","sources":["../../../../../../../front_end/models/trace/types/Configuration.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAwC7B,MAAM,CAAC,MAAM,QAAQ,GAAG,GAAkB,EAAE,CAAC,CAAC;IAC5C,uBAAuB,EAAE,KAAK;IAC9B,aAAa,EAAE,KAAK;IACpB,SAAS,EAAE,KAAK;IAChB,6BAA6B,EAAE,EAAE;CAClC,CAAC,CAAC;AAEH;;;;GAIG;AACH,MAAM,UAAU,gBAAgB,CAAC,MAAqB;IACpD,OAAO,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;AAChC,CAAC","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Platform from '../../../core/platform/platform.js';\nimport type * as SDK from '../../../core/sdk/sdk.js';\nimport type * as Protocol from '../../../generated/protocol.js';\nimport type * as Lantern from '../lantern/lantern.js';\n\nimport type * as File from './File.js';\n\nexport interface Configuration {\n  /**\n   * Include V8 RCS functions in the JS stacks\n   */\n  includeRuntimeCallStats: boolean;\n  /**\n   * Show all events: disable the default filtering which hides and excludes some events.\n   */\n  showAllEvents: boolean;\n  /**\n   * Extra detail for RPP developers (eg Trace Event json in Summary, and individual JS Sample events)\n   */\n  debugMode: boolean;\n  /**\n   * How many invalidation events will be stored for a layout (or similar) event.\n   * On large sites with a lot of DOM there can be thousands of invalidations\n   * associated with any given event. It is not useful to show the user 1000s of\n   * invalidations in the UI, but it is also expensive for us to hold onto them\n   * all, and it helps prevents OOM issues when running in NodeJS\n   * [https://github.com/GoogleChrome/lighthouse/issues/16111].\n   * Therefore, instead, we store only the latest 20 per event. We do also store\n   * the total count, so we can show that, but we'll only ever hold on to the\n   * last 20 invalidations (in DESC trace order - so the latest 20 in the trace file)\n   *\n   * If you set this to 0, we will skip the Invalidations processing entirely.\n   * 0 effectively disables the InvalidationsHandler and it will not even\n   * attempt to gather or track invalidations.\n   */\n  maxInvalidationEventsPerEvent: number;\n}\n\nexport const defaults = (): Configuration => ({\n  includeRuntimeCallStats: false,\n  showAllEvents: false,\n  debugMode: false,\n  maxInvalidationEventsPerEvent: 20,\n});\n\n/**\n * Generates a key that can be used to represent this config in a cache. This is\n * used mainly in tests, where we want to avoid re-parsing a file if we have\n * already processed it with the same configuration.\n */\nexport function configToCacheKey(config: Configuration): string {\n  return JSON.stringify(config);\n}\n\nexport interface ParseOptions {\n  /**\n   * If the trace was just recorded on the current page, rather than an imported file.\n   * TODO(paulirish): Maybe remove. This is currently unused by the Processor and Handlers\n   * @default false\n   */\n  isFreshRecording?: boolean;\n  /**\n   * If the trace is a CPU Profile rather than a Chrome tracing trace.\n   * @default false\n   */\n  isCPUProfile?: boolean;\n  metadata?: File.MetaData;\n  resolveSourceMap?: (params: ResolveSourceMapParams) => Promise<SDK.SourceMap.SourceMap|null>;\n  logger?: {\n    start: (id: string) => void,\n    end: (id: string) => void,\n  };\n  lanternSettings?: Omit<Lantern.Types.Simulation.Settings, 'networkAnalysis'>;\n}\n\nexport interface ResolveSourceMapParams {\n  scriptId: string;\n  scriptUrl: Platform.DevToolsPath.UrlString;\n  sourceMapUrl: Platform.DevToolsPath.UrlString;\n  frame: Protocol.Page.FrameId;\n}\n"]}