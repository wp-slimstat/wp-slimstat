{"version":3,"file":"LanternComputationData.js","sourceRoot":"","sources":["../../../../../../front_end/models/trace/LanternComputationData.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Protocol from '../../generated/protocol.js';\n\nimport * as Handlers from './handlers/handlers.js';\nimport * as Lantern from './lantern/lantern.js';\nimport type * as Types from './types/types.js';\n\ntype NetworkRequest = Lantern.Types.NetworkRequest<Types.Events.SyntheticNetworkRequest>;\n\nfunction createProcessedNavigation(parsedTrace: Handlers.Types.ParsedTrace, frameId: string, navigationId: string):\n    Lantern.Types.Simulation.ProcessedNavigation {\n  const scoresByNav = parsedTrace.PageLoadMetrics.metricScoresByFrameId.get(frameId);\n  if (!scoresByNav) {\n    throw new Lantern.Core.LanternError('missing metric scores for frame');\n  }\n\n  const scores = scoresByNav.get(navigationId);\n  if (!scores) {\n    throw new Lantern.Core.LanternError('missing metric scores for specified navigation');\n  }\n\n  const getTimestampOrUndefined =\n      (metric: Handlers.ModelHandlers.PageLoadMetrics.MetricName): Types.Timing.Micro|undefined => {\n        const metricScore = scores.get(metric);\n        if (!metricScore?.event) {\n          return;\n        }\n        return metricScore.event.ts;\n      };\n  const getTimestamp = (metric: Handlers.ModelHandlers.PageLoadMetrics.MetricName): Types.Timing.Micro => {\n    const metricScore = scores.get(metric);\n    if (!metricScore?.event) {\n      throw new Lantern.Core.LanternError(`missing metric: ${metric}`);\n    }\n    return metricScore.event.ts;\n  };\n  return {\n    timestamps: {\n      firstContentfulPaint: getTimestamp(Handlers.ModelHandlers.PageLoadMetrics.MetricName.FCP),\n      largestContentfulPaint: getTimestampOrUndefined(Handlers.ModelHandlers.PageLoadMetrics.MetricName.LCP),\n    },\n  };\n}\n\nfunction createParsedUrl(url: URL|string): Lantern.Types.ParsedURL {\n  if (typeof url === 'string') {\n    url = new URL(url);\n  }\n  return {\n    scheme: url.protocol.split(':')[0],\n    // Intentional, DevTools uses different terminology\n    host: url.hostname,\n    securityOrigin: url.origin,\n  };\n}\n\n/**\n * Returns a map of `pid` -> `tid[]`.\n */\nfunction findWorkerThreads(trace: Lantern.Types.Trace): Map<number, number[]> {\n  // TODO: WorkersHandler in Trace Engine needs to be updated to also include `pid` (only had `tid`).\n  const workerThreads = new Map();\n  const workerCreationEvents = ['ServiceWorker thread', 'DedicatedWorker thread'];\n\n  for (const event of trace.traceEvents) {\n    if (event.name !== 'thread_name' || !event.args.name) {\n      continue;\n    }\n    if (!workerCreationEvents.includes(event.args.name)) {\n      continue;\n    }\n\n    const tids = workerThreads.get(event.pid);\n    if (tids) {\n      tids.push(event.tid);\n    } else {\n      workerThreads.set(event.pid, [event.tid]);\n    }\n  }\n\n  return workerThreads;\n}\n\nfunction createLanternRequest(\n    parsedTrace: Readonly<Handlers.Types.ParsedTrace>, workerThreads: Map<number, number[]>,\n    request: Types.Events.SyntheticNetworkRequest): NetworkRequest|undefined {\n  if (request.args.data.connectionId === undefined || request.args.data.connectionReused === undefined) {\n    throw new Lantern.Core.LanternError('Trace is too old');\n  }\n\n  let url;\n  try {\n    url = new URL(request.args.data.url);\n  } catch {\n    return;\n  }\n\n  const timing = request.args.data.timing ? {\n    // These two timings are not included in the trace.\n    workerFetchStart: -1,\n    workerRespondWithSettled: -1,\n    ...request.args.data.timing,\n  } :\n                                            undefined;\n\n  const networkRequestTime = timing ? timing.requestTime * 1000 : request.args.data.syntheticData.downloadStart / 1000;\n\n  let fromWorker = false;\n  const tids = workerThreads.get(request.pid);\n  if (tids?.includes(request.tid)) {\n    fromWorker = true;\n  }\n\n  // Trace Engine collects worker thread ids in a different manner than `workerThreads` does.\n  // AFAIK these should be equivalent, but in case they are not let's also check this for now.\n  if (parsedTrace.Workers.workerIdByThread.has(request.tid)) {\n    fromWorker = true;\n  }\n\n  // `initiator` in the trace does not contain the stack trace for JS-initiated\n  // requests. Instead, that is stored in the `stackTrace` property of the SyntheticNetworkRequest.\n  // There are some minor differences in the fields, accounted for here.\n  // Most importantly, there seems to be fewer frames in the trace than the equivalent\n  // events over the CDP. This results in less accuracy in determining the initiator request,\n  // which means less edges in the graph, which mean worse results.\n  // TODO: Should fix in Chromium.\n  const initiator: Lantern.Types.NetworkRequest['initiator'] =\n      request.args.data.initiator ?? {type: Protocol.Network.InitiatorType.Other};\n  if (request.args.data.stackTrace) {\n    const callFrames = request.args.data.stackTrace.map(f => {\n      return {\n        scriptId: String(f.scriptId) as Protocol.Runtime.ScriptId,\n        url: f.url,\n        lineNumber: f.lineNumber - 1,\n        columnNumber: f.columnNumber - 1,\n        functionName: f.functionName,\n      };\n    });\n    initiator.stack = {callFrames};\n    // Note: there is no `parent` to set ...\n  }\n\n  let resourceType = request.args.data.resourceType;\n  if (request.args.data.initiator?.fetchType === 'xmlhttprequest') {\n    // @ts-expect-error yes XHR is a valid ResourceType. TypeScript const enums are so unhelpful.\n    resourceType = 'XHR';\n  } else if (request.args.data.initiator?.fetchType === 'fetch') {\n    // @ts-expect-error yes Fetch is a valid ResourceType. TypeScript const enums are so unhelpful.\n    resourceType = 'Fetch';\n  }\n\n  // TODO: set decodedBodyLength for data urls in Trace Engine.\n  let resourceSize = request.args.data.decodedBodyLength ?? 0;\n  if (url.protocol === 'data:' && resourceSize === 0) {\n    const commaIndex = url.pathname.indexOf(',');\n    if (url.pathname.substring(0, commaIndex).includes(';base64')) {\n      resourceSize = atob(url.pathname.substring(commaIndex + 1)).length;\n    } else {\n      resourceSize = url.pathname.length - commaIndex - 1;\n    }\n  }\n\n  return {\n    rawRequest: request,\n    requestId: request.args.data.requestId,\n    connectionId: request.args.data.connectionId,\n    connectionReused: request.args.data.connectionReused,\n    url: request.args.data.url,\n    protocol: request.args.data.protocol,\n    parsedURL: createParsedUrl(url),\n    documentURL: request.args.data.requestingFrameUrl,\n    rendererStartTime: request.ts / 1000,\n    networkRequestTime,\n    responseHeadersEndTime: request.args.data.syntheticData.downloadStart / 1000,\n    networkEndTime: request.args.data.syntheticData.finishTime / 1000,\n    transferSize: request.args.data.encodedDataLength,\n    resourceSize,\n    fromDiskCache: request.args.data.syntheticData.isDiskCached,\n    fromMemoryCache: request.args.data.syntheticData.isMemoryCached,\n    isLinkPreload: request.args.data.isLinkPreload,\n    finished: request.args.data.finished,\n    failed: request.args.data.failed,\n    statusCode: request.args.data.statusCode,\n    initiator,\n    timing,\n    resourceType,\n    mimeType: request.args.data.mimeType,\n    priority: request.args.data.priority,\n    frameId: request.args.data.frame,\n    fromWorker,\n    // Set later.\n    redirects: undefined,\n    redirectSource: undefined,\n    redirectDestination: undefined,\n    initiatorRequest: undefined,\n  };\n}\n\n/**\n * @param request The request to find the initiator of\n */\nfunction chooseInitiatorRequest(request: NetworkRequest, requestsByURL: Map<string, NetworkRequest[]>): NetworkRequest|\n    null {\n  if (request.redirectSource) {\n    return request.redirectSource;\n  }\n\n  const initiatorURL = Lantern.Graph.PageDependencyGraph.getNetworkInitiators(request)[0];\n  let candidates = requestsByURL.get(initiatorURL) || [];\n  // The (valid) initiator must come before the initiated request.\n  candidates = candidates.filter(c => {\n    return c.responseHeadersEndTime <= request.rendererStartTime && c.finished && !c.failed;\n  });\n  if (candidates.length > 1) {\n    // Disambiguate based on prefetch. Prefetch requests have type 'Other' and cannot\n    // initiate requests, so we drop them here.\n    const nonPrefetchCandidates =\n        candidates.filter(cand => cand.resourceType !== Lantern.Types.NetworkRequestTypes.Other);\n    if (nonPrefetchCandidates.length) {\n      candidates = nonPrefetchCandidates;\n    }\n  }\n  if (candidates.length > 1) {\n    // Disambiguate based on frame. It's likely that the initiator comes from the same frame.\n    const sameFrameCandidates = candidates.filter(cand => cand.frameId === request.frameId);\n    if (sameFrameCandidates.length) {\n      candidates = sameFrameCandidates;\n    }\n  }\n  if (candidates.length > 1 && request.initiator.type === 'parser') {\n    // Filter to just Documents when initiator type is parser.\n    const documentCandidates =\n        candidates.filter(cand => cand.resourceType === Lantern.Types.NetworkRequestTypes.Document);\n    if (documentCandidates.length) {\n      candidates = documentCandidates;\n    }\n  }\n  if (candidates.length > 1) {\n    // If all real loads came from successful preloads (url preloaded and\n    // loads came from the cache), filter to link rel=preload request(s).\n    const linkPreloadCandidates = candidates.filter(c => c.isLinkPreload);\n    if (linkPreloadCandidates.length) {\n      const nonPreloadCandidates = candidates.filter(c => !c.isLinkPreload);\n      const allPreloaded = nonPreloadCandidates.every(c => c.fromDiskCache || c.fromMemoryCache);\n      if (nonPreloadCandidates.length && allPreloaded) {\n        candidates = linkPreloadCandidates;\n      }\n    }\n  }\n\n  // Only return an initiator if the result is unambiguous.\n  return candidates.length === 1 ? candidates[0] : null;\n}\n\nfunction linkInitiators(lanternRequests: NetworkRequest[]): void {\n  const requestsByURL = new Map<string, NetworkRequest[]>();\n  for (const request of lanternRequests) {\n    const requests = requestsByURL.get(request.url) || [];\n    requests.push(request);\n    requestsByURL.set(request.url, requests);\n  }\n\n  for (const request of lanternRequests) {\n    const initiatorRequest = chooseInitiatorRequest(request, requestsByURL);\n    if (initiatorRequest) {\n      request.initiatorRequest = initiatorRequest;\n    }\n  }\n}\n\nfunction createNetworkRequests(\n    trace: Lantern.Types.Trace, parsedTrace: Handlers.Types.ParsedTrace, startTime = 0,\n    endTime = Number.POSITIVE_INFINITY): NetworkRequest[] {\n  const workerThreads = findWorkerThreads(trace);\n\n  const lanternRequests: NetworkRequest[] = [];\n  for (const request of parsedTrace.NetworkRequests.byTime) {\n    if (request.ts >= startTime && request.ts < endTime) {\n      const lanternRequest = createLanternRequest(parsedTrace, workerThreads, request);\n      if (lanternRequest) {\n        lanternRequests.push(lanternRequest);\n      }\n    }\n  }\n\n  // Trace Engine consolidates all redirects into a single request object, but lantern needs\n  // an entry for each redirected request.\n  for (const request of [...lanternRequests]) {\n    if (!request.rawRequest) {\n      continue;\n    }\n\n    const redirects = request.rawRequest.args.data.redirects;\n    if (!redirects.length) {\n      continue;\n    }\n\n    const requestChain = [];\n    for (const redirect of redirects) {\n      const redirectedRequest = structuredClone(request);\n\n      redirectedRequest.networkRequestTime = redirect.ts / 1000;\n      redirectedRequest.rendererStartTime = redirectedRequest.networkRequestTime;\n\n      redirectedRequest.networkEndTime = (redirect.ts + redirect.dur) / 1000;\n      redirectedRequest.responseHeadersEndTime = redirectedRequest.networkEndTime;\n\n      redirectedRequest.timing = {\n        requestTime: redirectedRequest.networkRequestTime / 1000,\n        receiveHeadersStart: redirectedRequest.responseHeadersEndTime,\n        receiveHeadersEnd: redirectedRequest.responseHeadersEndTime,\n        proxyStart: -1,\n        proxyEnd: -1,\n        dnsStart: -1,\n        dnsEnd: -1,\n        connectStart: -1,\n        connectEnd: -1,\n        sslStart: -1,\n        sslEnd: -1,\n        sendStart: -1,\n        sendEnd: -1,\n        workerStart: -1,\n        workerReady: -1,\n        workerFetchStart: -1,\n        workerRespondWithSettled: -1,\n        pushStart: -1,\n        pushEnd: -1,\n      };\n\n      redirectedRequest.url = redirect.url;\n      redirectedRequest.parsedURL = createParsedUrl(redirect.url);\n      // TODO: Trace Engine is not retaining the actual status code.\n      redirectedRequest.statusCode = 302;\n      redirectedRequest.resourceType = undefined;\n      // TODO: Trace Engine is not retaining transfer size of redirected request.\n      redirectedRequest.transferSize = 400;\n      requestChain.push(redirectedRequest);\n      lanternRequests.push(redirectedRequest);\n    }\n    requestChain.push(request);\n\n    for (let i = 0; i < requestChain.length; i++) {\n      const request = requestChain[i];\n      if (i > 0) {\n        request.redirectSource = requestChain[i - 1];\n        request.redirects = requestChain.slice(0, i);\n      }\n      if (i !== requestChain.length - 1) {\n        request.redirectDestination = requestChain[i + 1];\n      }\n    }\n\n    // Apply the `:redirect` requestId convention: only redirects[0].requestId is the actual\n    // requestId, all the rest have n occurrences of `:redirect` as a suffix.\n    for (let i = 1; i < requestChain.length; i++) {\n      requestChain[i].requestId = `${requestChain[i - 1].requestId}:redirect`;\n    }\n  }\n\n  linkInitiators(lanternRequests);\n\n  // This would already be sorted by rendererStartTime, if not for the redirect unwrapping done\n  // above.\n  return lanternRequests.sort((a, b) => a.rendererStartTime - b.rendererStartTime);\n}\n\nfunction collectMainThreadEvents(\n    trace: Lantern.Types.Trace, parsedTrace: Handlers.Types.ParsedTrace): Lantern.Types.TraceEvent[] {\n  const Meta = parsedTrace.Meta;\n  const mainFramePids = Meta.mainFrameNavigations.length ? new Set(Meta.mainFrameNavigations.map(nav => nav.pid)) :\n                                                           Meta.topLevelRendererIds;\n\n  const rendererPidToTid = new Map();\n  for (const pid of mainFramePids) {\n    const threads = Meta.threadsInProcess.get(pid) ?? [];\n\n    let found = false;\n    for (const [tid, thread] of threads) {\n      if (thread.args.name === 'CrRendererMain') {\n        rendererPidToTid.set(pid, tid);\n        found = true;\n        break;\n      }\n    }\n\n    if (found) {\n      continue;\n    }\n\n    // `CrRendererMain` can be missing if chrome is launched with the `--single-process` flag.\n    // In this case, page tasks will be run in the browser thread.\n    for (const [tid, thread] of threads) {\n      if (thread.args.name === 'CrBrowserMain') {\n        rendererPidToTid.set(pid, tid);\n        found = true;\n        break;\n      }\n    }\n  }\n\n  return trace.traceEvents.filter(e => rendererPidToTid.get(e.pid) === e.tid);\n}\n\nfunction createGraph(\n    requests: Lantern.Types.NetworkRequest[], trace: Lantern.Types.Trace, parsedTrace: Handlers.Types.ParsedTrace,\n    url?: Lantern.Types.Simulation.URL): Lantern.Graph.Node<Types.Events.SyntheticNetworkRequest> {\n  const mainThreadEvents = collectMainThreadEvents(trace, parsedTrace);\n\n  // url defines the initial request that the Lantern graph starts at (the root node) and the\n  // main document request. These are equal if there are no redirects.\n  if (!url) {\n    url = {\n      requestedUrl: requests[0].url,\n      mainDocumentUrl: '',\n    };\n\n    let request = requests[0];\n    while (request.redirectDestination) {\n      request = request.redirectDestination;\n    }\n    url.mainDocumentUrl = request.url;\n  }\n\n  return Lantern.Graph.PageDependencyGraph.createGraph(mainThreadEvents, requests, url);\n}\n\nexport {\n  createGraph,\n  createNetworkRequests,\n  createProcessedNavigation,\n};\n"]}