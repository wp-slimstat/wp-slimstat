{"version":3,"file":"TraceFilter.js","sourceRoot":"","sources":["../../../../../../../front_end/models/trace/extras/TraceFilter.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAG7B,OAAO,KAAK,KAAK,MAAM,mBAAmB,CAAC;AAE3C,MAAM,OAAgB,WAAW;CAEhC;AAED,MAAM,OAAO,mBAAoB,SAAQ,WAAW;IACjC,YAAY,CAAc;IAC3C,YAAY,YAAsB;QAChC,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,YAAY,GAAG,IAAI,GAAG,CAAC,YAAY,CAAC,CAAC;IAC5C,CAAC;IAED,MAAM,CAAC,KAAyB;QAC9B,IAAI,KAAK,CAAC,UAAU,CAAC,yBAAyB,CAAC,KAAK,CAAC,EAAE,CAAC;YACtD,OAAO,IAAI,CAAC;QACd,CAAC;QACD,OAAO,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,mBAAmB,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;IACrE,CAAC;IAED,MAAM,CAAC,SAAS,CAAC,KAAyB;QACxC,sEAAsE;QACtE,IAAI,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,eAAe,CAAC,EAAE,CAAC;YACxC,0DAAsC;QACxC,CAAC;QACD,sEAAsE;QACtE,IAAI,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,mBAAmB,CAAC,EAAE,CAAC;YAC5C,wDAAqC;QACvC,CAAC;QACD,OAAO,KAAK,CAAC,IAAyB,CAAC;IACzC,CAAC;CACF;AAED,MAAM,OAAO,qBAAsB,SAAQ,WAAW;IACpD,eAAe,CAAyB;IAExC,YAAY,cAAmC;QAC7C,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,eAAe,GAAG,IAAI,GAAG,CAAC,cAAc,CAAC,CAAC;IACjD,CAAC;IAED,MAAM,CAAC,KAAyB;QAC9B,OAAO,CAAC,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,mBAAmB,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;IACzE,CAAC;CACF;AAED,MAAM,OAAO,mBAAoB,SAAQ,WAAW;IAClD,aAAa,CAAyB;IACtC,YAAY,YAAiC;QAC3C,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,aAAa,GAAG,IAAI,GAAG,CAAC,YAAY,CAAC,CAAC;IAC7C,CAAC;IAED,MAAM,CAAC,KAAyB;QAC9B,OAAO,CAAC,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,KAAK,CAAC,IAAyB,CAAC,CAAC;IAClE,CAAC;CACF","sourcesContent":["// Copyright 2017 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Handlers from '../handlers/handlers.js';\nimport * as Types from '../types/types.js';\n\nexport abstract class TraceFilter {\n  abstract accept(_event: Types.Events.Event, parsedTrace?: Handlers.Types.ParsedTrace): boolean;\n}\n\nexport class VisibleEventsFilter extends TraceFilter {\n  private readonly visibleTypes: Set<string>;\n  constructor(visibleTypes: string[]) {\n    super();\n    this.visibleTypes = new Set(visibleTypes);\n  }\n\n  accept(event: Types.Events.Event): boolean {\n    if (Types.Extensions.isSyntheticExtensionEntry(event)) {\n      return true;\n    }\n    return this.visibleTypes.has(VisibleEventsFilter.eventType(event));\n  }\n\n  static eventType(event: Types.Events.Event): Types.Events.Name {\n    // Any blink.console category events are treated as ConsoleTime events\n    if (event.cat.includes('blink.console')) {\n      return Types.Events.Name.CONSOLE_TIME;\n    }\n    // Any blink.user_timing egory events are treated as UserTiming events\n    if (event.cat.includes('blink.user_timing')) {\n      return Types.Events.Name.USER_TIMING;\n    }\n    return event.name as Types.Events.Name;\n  }\n}\n\nexport class InvisibleEventsFilter extends TraceFilter {\n  #invisibleTypes: Set<Types.Events.Name>;\n\n  constructor(invisibleTypes: Types.Events.Name[]) {\n    super();\n    this.#invisibleTypes = new Set(invisibleTypes);\n  }\n\n  accept(event: Types.Events.Event): boolean {\n    return !this.#invisibleTypes.has(VisibleEventsFilter.eventType(event));\n  }\n}\n\nexport class ExclusiveNameFilter extends TraceFilter {\n  #excludeNames: Set<Types.Events.Name>;\n  constructor(excludeNames: Types.Events.Name[]) {\n    super();\n    this.#excludeNames = new Set(excludeNames);\n  }\n\n  accept(event: Types.Events.Event): boolean {\n    return !this.#excludeNames.has(event.name as Types.Events.Name);\n  }\n}\n"]}