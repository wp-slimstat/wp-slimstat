{"version":3,"file":"ScriptsHandler.js","sourceRoot":"","sources":["../../../../../../../front_end/models/trace/handlers/ScriptsHandler.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2025 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Platform from '../../../core/platform/platform.js';\n// eslint-disable-next-line rulesdir/no-imports-in-directory\nimport type * as SDK from '../../../core/sdk/sdk.js';\nimport type * as Protocol from '../../../generated/protocol.js';\nimport * as Types from '../types/types.js';\n\nimport {data as metaHandlerData, type MetaHandlerData} from './MetaHandler.js';\nimport {data as networkRequestsHandlerData} from './NetworkRequestsHandler.js';\nimport type {HandlerName} from './types.js';\n\nfunction completeURL(base: string, url: string): string|null {\n  if (url.startsWith('data:') || url.startsWith('blob:') || url.startsWith('javascript:') || url.startsWith('mailto:')) {\n    return url;\n  }\n\n  try {\n    return new URL(url, base).href;\n  } catch {}\n\n  return null;\n}\n\nexport interface ScriptsData {\n  /** Note: this is only populated when the \"Enhanced Traces\" feature is enabled. */\n  scripts: Script[];\n}\n\nexport interface Script {\n  isolate: string;\n  scriptId: Protocol.Runtime.ScriptId;\n  frame: string;\n  ts: Types.Timing.Micro;\n  url?: string;\n  sourceUrl?: string;\n  content?: string;\n  /** Note: this is the literal text given as the sourceMappingURL value. It has not been resolved relative to the script url. */\n  sourceMapUrl?: string;\n  sourceMap?: SDK.SourceMap.SourceMap;\n  request?: Types.Events.SyntheticNetworkRequest;\n}\n\nconst scriptById = new Map<string, Script>();\n\nexport function deps(): HandlerName[] {\n  return ['Meta', 'NetworkRequests'];\n}\n\nexport function reset(): void {\n  scriptById.clear();\n}\n\nexport function handleEvent(event: Types.Events.Event): void {\n  const getOrMakeScript = (isolate: string, scriptIdAsNumber: number): Script => {\n    const scriptId = String(scriptIdAsNumber) as Protocol.Runtime.ScriptId;\n    const key = `${isolate}.${scriptId}`;\n    return Platform.MapUtilities.getWithDefault(\n        scriptById, key, () => ({isolate, scriptId, frame: '', ts: 0} as Script));\n  };\n\n  if (Types.Events.isTargetRundownEvent(event) && event.args.data) {\n    const {isolate, scriptId, frame} = event.args.data;\n    const script = getOrMakeScript(isolate, scriptId);\n    script.frame = frame;\n    script.ts = event.ts;\n\n    return;\n  }\n\n  if (Types.Events.isV8SourceRundownEvent(event)) {\n    const {isolate, scriptId, url, sourceUrl, sourceMapUrl} = event.args.data;\n    const script = getOrMakeScript(isolate, scriptId);\n    script.url = url;\n    if (sourceUrl) {\n      script.sourceUrl = sourceUrl;\n    }\n    if (sourceMapUrl) {\n      script.sourceMapUrl = sourceMapUrl;\n    }\n    return;\n  }\n\n  if (Types.Events.isV8SourceRundownSourcesScriptCatchupEvent(event)) {\n    const {isolate, scriptId, sourceText} = event.args.data;\n    const script = getOrMakeScript(isolate, scriptId);\n    script.content = sourceText;\n    return;\n  }\n\n  if (Types.Events.isV8SourceRundownSourcesLargeScriptCatchupEvent(event)) {\n    const {isolate, scriptId, sourceText} = event.args.data;\n    const script = getOrMakeScript(isolate, scriptId);\n    script.content = (script.content ?? '') + sourceText;\n    return;\n  }\n}\n\nfunction findFrame(meta: MetaHandlerData, frameId: string): Types.Events.TraceFrame|null {\n  for (const frames of meta.frameByProcessId?.values()) {\n    const frame = frames.get(frameId);\n    if (frame) {\n      return frame;\n    }\n  }\n\n  return null;\n}\n\nfunction findNetworkRequest(networkRequests: Types.Events.SyntheticNetworkRequest[], script: Script):\n    Types.Events.SyntheticNetworkRequest|null {\n  return networkRequests.find(request => request.args.data.url === script.url) ?? null;\n}\n\nexport async function finalize(options: Types.Configuration.ParseOptions): Promise<void> {\n  const networkRequests = [...networkRequestsHandlerData().byId.values()];\n  for (const script of scriptById.values()) {\n    script.request = findNetworkRequest(networkRequests, script) ?? undefined;\n  }\n\n  if (!options.resolveSourceMap) {\n    return;\n  }\n\n  const meta = metaHandlerData();\n\n  const promises = [];\n  for (const script of scriptById.values()) {\n    // No frame or url means the script came from somewhere we don't care about.\n    // Note: scripts from inline <SCRIPT> elements use the url of the HTML document,\n    // so aren't ignored.\n    if (!script.frame || !script.url || !script.sourceMapUrl) {\n      continue;\n    }\n\n    const frameUrl = findFrame(meta, script.frame)?.url as Platform.DevToolsPath.UrlString | undefined;\n    if (!frameUrl) {\n      continue;\n    }\n\n    // If there is a `sourceURL` magic comment, resolve the compiledUrl against the frame url.\n    // example: `// #sourceURL=foo.js` for target frame https://www.example.com/home -> https://www.example.com/home/foo.js\n    let sourceUrl = script.url;\n    if (script.sourceUrl) {\n      sourceUrl = completeURL(frameUrl, script.sourceUrl) ?? script.sourceUrl;\n    }\n\n    // Resolve the source map url. The value given by v8 may be relative, so resolve it here.\n    // This process should match the one in `SourceMapManager.attachSourceMap`.\n    const sourceMapUrl =\n        completeURL(sourceUrl as Platform.DevToolsPath.UrlString, script.sourceMapUrl);\n    if (!sourceMapUrl) {\n      continue;\n    }\n\n    script.sourceMapUrl = sourceMapUrl;\n\n    const params: Types.Configuration.ResolveSourceMapParams = {\n      scriptId: script.scriptId,\n      scriptUrl: sourceUrl as Platform.DevToolsPath.UrlString,\n      sourceMapUrl: sourceMapUrl as Platform.DevToolsPath.UrlString,\n      frame: script.frame as Protocol.Page.FrameId,\n    };\n    const promise = options.resolveSourceMap(params).then(sourceMap => {\n      if (sourceMap) {\n        script.sourceMap = sourceMap;\n      }\n    });\n    promises.push(promise);\n  }\n  await Promise.all(promises);\n}\n\nexport function data(): ScriptsData {\n  return {\n    scripts: [...scriptById.values()],\n  };\n}\n"]}