export { ProcessedNavigationComputed as ProcessedNavigation };
declare const ProcessedNavigationComputed: typeof ProcessedNavigation & {
    request: (dependencies: import("../index.js").Trace | import("../index.js").Artifacts.ProcessedTrace, context: LH.Artifacts.ComputedContext) => ReturnType<typeof ProcessedNavigation.compute_>;
};
declare class ProcessedNavigation {
    /**
     * @param {LH.Trace | LH.Artifacts.ProcessedTrace} traceOrProcessedTrace
     * @return {traceOrProcessedTrace is LH.Artifacts.ProcessedTrace}
     */
    static isProcessedTrace(traceOrProcessedTrace: LH.Trace | LH.Artifacts.ProcessedTrace): traceOrProcessedTrace is LH.Artifacts.ProcessedTrace;
    /**
     * @param {LH.Trace | LH.Artifacts.ProcessedTrace} traceOrProcessedTrace
     * @param {LH.Artifacts.ComputedContext} context
     * @return {Promise<LH.Artifacts.ProcessedNavigation>}
     */
    static compute_(traceOrProcessedTrace: LH.Trace | LH.Artifacts.ProcessedTrace, context: LH.Artifacts.ComputedContext): Promise<LH.Artifacts.ProcessedNavigation>;
}
//# sourceMappingURL=processed-navigation.d.ts.map